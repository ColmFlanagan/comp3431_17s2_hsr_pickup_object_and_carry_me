#!/usr/bin/env python
from __future__ import division
import sys
import rospy
import cv2
import os
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker
from sets import Set
import numpy as np
import roslaunch
import math
import tf
import geometry_msgs.msg 
import time

DEPTH_IMAGE_TOPIC = "/camera/depth/image_rect_raw"
RGB_IMAGE_TOPIC = "/hsrb/head_rgbd_sensor/rgb/image_rect_color"

class image_converter:

	def __init__(self):
		rospy.init_node('image_converter', anonymous=True)

	


		self.marked = Set()
		self.bridge = CvBridge()
		self.image_sub = rospy.Subscriber(RGB_IMAGE_TOPIC, Image, self.callback, queue_size=1, buff_size=480*640*8)
		#self.depth_sub = rospy.Subscriber(DEPTH_IMAGE_TOPIC, Image, self.get_depth)

		# Initialise the depth image 
		self.depth_image = np.zeros((480,640,1), np.uint8)

	def get_depth(self, data):

		try:
			
			cv_image = self.bridge.imgmsg_to_cv2(data, "32FC1")
			self.depthimage = cv_image
		except CvBridgeError as e:
			print(e)	
		sys.exit()

	def callback(self, data):
		y = 10
		h = 100
		x = 10
		w = 100
		img = self.bridge.imgmsg_to_cv2(data, "bgr8")
		cropped_img = self.depthimage[y:y+h, x:x+w]
		depth = np.asarray(cropped_img)
		print(depth)
		cv2.imshow('img',img)
		cv2.waitKey(0)


def main(args):
	ic = image_converter()
	try:
		rospy.spin()
	except KeyboardInterrupt:
		print("Shutting down")
	cv2.destroyAllWindows()

if __name__ == '__main__':
	main(sys.argv)
